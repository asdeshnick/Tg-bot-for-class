import sqlite3
import telebot
from telebot import types
import random

token = ''
bot = telebot.TeleBot(token)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_db():
    return sqlite3.connect('users.db')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users
def create_users_table():
    with connect_db() as conn:
        cursor = conn.cursor()
        create_table_query = '''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            user_group_id INTEGER,
            user_name TEXT
        );
        '''
        cursor.execute(create_table_query)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_access(user_id):
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT user_group_id, user_name FROM users WHERE user_id=?', (user_id,))
        return cursor.fetchone()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 
def add_user(user_id, user_name):
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (user_id, user_name, user_group_id) VALUES (?, ?, ?)',
                      (user_id, user_name, 0))
        conn.commit()

@bot.message_handler(commands=['start'])
def handle_start_command(message):
    user_id = message.chat.id
    access = get_access(user_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ—Ö–∞")
    btn3 = types.KeyboardButton("–°–æ–∑–¥–∞–≤–∞–ª –ê–Ω–¥—Ä–µ–π")
    markup.add(btn1, btn2, btn3)
    
    if access:
        bot.send_message(user_id, f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {access[1]}.', reply_markup=markup)
    else:
        msg = bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', reply_markup=markup)
        bot.register_next_step_handler(msg, process_name)

def process_name(message):
    user_id = message.chat.id
    user_name = message.text.strip()
    add_user(user_id, user_name)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ—Ö–∞")
    btn3 = types.KeyboardButton("–°–æ–∑–¥–∞–≤–∞–ª –ê–Ω–¥—Ä–µ–π")
    markup.add(btn1, btn2, btn3)
    
    bot.send_message(user_id, f'–°–ø–∞—Å–∏–±–æ, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.InlineKeyboardMarkup()
        github_btn = types.InlineKeyboardButton("GitHub", url='https://github.com/asdeshnick')
        markup.add(github_btn)
        bot.send_message(message.chat.id, '–ú–æ–π GitHub:', reply_markup=markup)
        
    elif message.text == '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ—Ö–∞':
        loh = ["–õ–æ—Ö", "–ù–µ –ª–æ—Ö"]
        bot.send_message(message.chat.id, random.choice(loh))
        
    elif message.text == '–°–æ–∑–¥–∞–≤–∞–ª –ê–Ω–¥—Ä–µ–π':
        bot.send_message(message.chat.id, '–î–∞, —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–ª –ê–Ω–¥—Ä–µ–π!')

@bot.message_handler(commands=['admin'])
def handle_admin_command(message):
    access = get_access(message.chat.id)
    
    if not access:
        return bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!')
    
    if access[0] == 1:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç Admin!')
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='manage_users')
        btn2 = types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data='view_stats')
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç User! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if call.data == 'manage_users':
        bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    elif call.data == 'view_stats':
        bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

if __name__ == '__main__':
    create_users_table()
    bot.polling(none_stop=True)
