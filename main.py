import sqlite3
import telebot
from telebot import types
import random

# –ó–∞–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram API
token = ''  # –í–∞—à —Ç–æ–∫–µ–Ω –±—Ä–∞—Ç—å –µ–≥–æ —É –±–æ—Ç—Ñ–∞—Ç–∑–µ—Ä
bot = telebot.TeleBot(token)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_db():
    return sqlite3.connect('users.db')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users
def create_users_table():
    with connect_db() as conn:
        cursor = conn.cursor()
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        create_table_query = '''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            user_group_id INTEGER,
            user_name TEXT
        );
        '''
        cursor.execute(create_table_query)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_access(user_id):
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT user_group_id, user_name FROM users WHERE user_id=?', (user_id,))
        result = cursor.fetchone()
        return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 
def add_user(user_id, user_name):
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (user_id, user_name, user_group_id) VALUES (?, ?, ?)',
                       (user_id, user_name, '0'))  # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å –≥—Ä—É–ø–ø—ã '0'
        conn.commit()

@bot.message_handler(commands=['start'])
def handle_start_command(message):
    user_id = message.chat.id
    access = get_access(user_id)

    if access:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {}.'.format(access[1])) 
    else:
        msg = bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:')
        bot.register_next_step_handler(msg, process_name)
        btn_greet = types.KeyboardButton("/play")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_greet)
        
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn_check = types.KeyboardButton('–°–æ—Å–∞–ª?')
        btn_creator = types.KeyboardButton('–°–æ–∑–¥–∞–≤–∞–ª –ê–Ω–¥—Ä–µ–π')
        bot.send_message(message.from_user.id, '–º–æ–π github ' + '[—Å—Å—ã–ª–∫–∞](https://github.com/asdeshnick)', parse_mode='Markdown')
        markup.add(btn_check, btn_creator)
        bot.send_message(message.from_user.id, '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ ', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == '–°–æ—Å–∞–ª?':  
        loh = ["–°–æ—Å–∞–ª", "–ù–µ—Ç"]
        loh_bot = random.choice(loh)
        bot.send_message(message.from_user.id, loh_bot)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

def process_name(message):
    user_id = message.chat.id
    user_name = message.text.strip()
    print(user_name, user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user(user_id, user_name)

    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, {}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.'.format(user_name))

@bot.message_handler(commands=['admin']) # admin–∫—É –º–Ω–µ –≤ –ø–∞–¥–ª—É –¥–µ–ª–∞—Ç—å, –Ω–æ –µ–µ —Å–¥–µ–ª–∞—Ç—å –ª–µ–≥–∫–æ 
def handle_admin_command(message):
    access = get_access(message.chat.id)

    if access:
        if access[0] == '1':
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç Admin!')
        else:
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç User!')
    else:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    create_users_table()
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.stop_bot()

